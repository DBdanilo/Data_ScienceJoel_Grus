{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pprint import pprint as p\n",
    "from functools import reduce\n",
    "import math\n",
    "import matplotlib as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 선형대수\n",
    "\n",
    "선형대수는 데이터 과학 기술과 개념을 뒷받침 해주는 분야이다.\n",
    "\n",
    "### 1. 벡터\n",
    "\n",
    "벡터는 어떤 유한한 차원에 공간에 존재하는 점들이다. 대부분의 데이터(특히 숫자)는 벡터로 표현 가능하다. 벡터를 가장 간단하게 list로 표현 가능하다. 단 list로 벡터 연산은 할 수 없다. 따로 함수를 만들어주어야 한다.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "index = [1, 2, 3] #키, 몸무게, 나이\n",
    "grade = [100,84,92] #시험1~3 점수\n",
    "all=[[176, 66, 27],\n",
    "    [100,84,92,51]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "각 성분끼리의 덧,뺄셈"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def vectorAdd(v,w): \n",
    "    \"\"\"각 성분끼리 덧셈\"\"\"\n",
    "    return[v_i + w_i for v_i,w_i in zip(v,w)]\n",
    "\n",
    "def vectorSubtract(v,w):\n",
    "    \"\"\"각 성분끼리 뺄셈\"\"\"\n",
    "    return[v_i - w_i for v_i,w_i in zip(v,w)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[101, 86, 95]\n",
      "[-99, -82, -89]\n"
     ]
    }
   ],
   "source": [
    "p(vectorAdd(index, grade))\n",
    "p(vectorSubtract(index,grade))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "벡터로 구성된 list에서 모든 벡터의 각 성분을 더하고 싶은 경우"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def vectorSum(vectors): \n",
    "    \"\"\"모든 벡터의 각 성분들끼리 덧셈\"\"\"\n",
    "    return reduce(vectorAdd, vectors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[276, 150, 119]\n"
     ]
    }
   ],
   "source": [
    "p(vectorSum(all))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "벡터와 스칼라 곱셈"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scalarMultiply(scalar,vectors): \n",
    "    \"\"\"벡터에 스칼라를 곱함\"\"\"\n",
    "    return [scalar * v_i for v_i in vectors] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10, 20, 30]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scalarMultiply(10,index)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "같은 길이의 벡터로 구성된 list가 주어졌을 때 각 성분병 평균을 구함"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def vectorMean(vectors):\n",
    "    \"\"\"i번째 성분이 입력된 벡터의\n",
    "    i번째 성분의 평균을 의미하는 벡터 계산\"\"\"\n",
    "    lenth=len(vectors)\n",
    "    return scalarMultiply(1/lenth, vectorSum(vectors))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[138.0, 75.0, 59.5]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vectorMean(all)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "벡터의 내적 계산(벡터의 각 성분별 곱한 값을 더한 값)\n",
    "\n",
    "내적은 벡터 v가 벡터 w방향으로 얼마나 멀리 뻗는지를 나타냄"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def dot(v,w):\n",
    "    \"\"\"v_1 * w_1 + ... + v_n * w_n\"\"\"\n",
    "    return sum(v_i * w_i for v_i, w_i in zip(v,w))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dot(index,[10,1,0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "내적의 개념을 사용하여 각 성분의 제곱 합을 쉽게 구할 수 있다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sumOfSquares(v):\n",
    "    \"\"\"v_1 * v1 + ... + v_n * v_n\"\"\"\n",
    "    return dot(v, v)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sumOfSquares(index)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "제곱 값의 합을 이용하여 벡터의 크기를 계산할 수 있다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def magnitude(v):\n",
    "    return math.sqrt(sumOfSquares(v))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.7416573867739413"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "magnitude(index)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "두 벡터간의 거리 계산 식은 아래와 같다.\n",
    "$$\\sqrt{(v_1 - w_1)^2 + ... + (v_n - w_n)^2 }$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def squaredDistance(v, w):\n",
    "    return sumOfSquares(vectorSubtract(v, w))\n",
    "\n",
    "def distance(v, w):\n",
    "    return math.sqrt(squaredDistance(v, w))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "156.35216659835578"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distance(index,grade)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. 행렬\n",
    "\n",
    "2차원으로 구성된 숫자의 집합. 2차원 list로 표현 가능하다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "A = [[1,2,3],[4,5,6]] # 2 Row, 3 Col\n",
    "B = [[1,2],[3,4,],[4,5]] # 3 Row, 2 Col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def shape(L):\n",
    "    numOfRows=len(L)\n",
    "    numOfCols=len(L[0]) if L else 0\n",
    "    return numOfRows, numOfCols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 3)\n",
      "(3, 2)\n"
     ]
    }
   ],
   "source": [
    "print(shape(A))\n",
    "print(shape(B))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getRow(L,i):\n",
    "    return L[i]\n",
    "def getColumn(L,j):\n",
    "    return [L_i[j] for L_i in L]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3]\n",
      "[1, 4]\n"
     ]
    }
   ],
   "source": [
    "print(getRow(A,0))\n",
    "print(getColumn(A,0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "단위 행렬을 만들어 보자"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_matrix(num_rows, num_cols, entry_fn):\n",
    "    \"\"\"i, j번째 원소가 entry_fn(i,j)인\n",
    "    num_rows * num_cols 행렬을 반환\"\"\"\n",
    "    return [[entry_fn(i, j) for j in range(num_cols)] for i in range(num_rows)]\n",
    "\n",
    "def is_diagonal(i, j):\n",
    "    \"\"\"i, j가 같을 때 1이여야 대각행렬 완성\"\"\"\n",
    "    return 1 if i == j else 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1, 0, 0, 0, 0],\n",
      " [0, 1, 0, 0, 0],\n",
      " [0, 0, 1, 0, 0],\n",
      " [0, 0, 0, 1, 0],\n",
      " [0, 0, 0, 0, 1]]\n"
     ]
    }
   ],
   "source": [
    "identity_matrix = make_matrix(5, 5, is_diagonal)\n",
    "p(identity_matrix)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "행렬이 중요한 몇 가지 이유가 있다.\n",
    "1. 각 벡터를 행렬의 행으로 나타냄으로써 여러 벡터로 구성된 데이터 셋을 행렬로 표현할 수 있다. 예로 3명에 대한 키, 몸무게가 주어졌다면 3 * 2 행렬로 표현 가능하다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = [[175,66],\n",
    "       [192,82],\n",
    "       [155,48]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. k차원의 벡터를 n차원 벡터로 변환해주는 선형함수를 n*k 행렬로 표현할 수 있다.\n",
    "3. 행렬로 이진관계를 나타낼 수 있다. 예로, i와 j가 연결되어 있다면 A[i][j]의 값이 1이고 그렇지 않다면 0인 행렬 A로 네트워크를 표현할 수 있다. 아래와 같이 네트워크를 표현한다면"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "friendships=[(0,1), (0,2), (1,2), (1,3),(2,3),(3,4),\n",
    "            (4,5), (5,6), (5,7), (6,8), (7,8), (8,9)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "아래와 같이 행렬로 표현 가능하다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#          user 0  1  2  3  4  5  6  7  8  9\n",
    "#\n",
    "friendships = [[0, 1, 1, 0, 0, 0, 0, 0, 0, 0], # user 0\n",
    "               [1, 0, 1, 1, 0, 0, 0, 0, 0, 0], # user 1\n",
    "               [1, 1, 0, 1, 0, 0, 0, 0, 0, 0], # user 2\n",
    "               [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], # user 3\n",
    "               [0, 0, 0, 1, 0, 1, 0, 0, 0, 0], # user 4\n",
    "               [0, 0, 0, 0, 1, 0, 1, 1, 0, 0], # user 5\n",
    "               [0, 0, 0, 0, 0, 1, 0, 0, 1, 0], # user 6\n",
    "               [0, 0, 0, 0, 0, 1, 0, 0, 1, 0], # user 7\n",
    "               [0, 0, 0, 0, 0, 0, 1, 1, 0, 1], # user 8\n",
    "               [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]] # user 9"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "만약 네트워크에서 연결된 사용자 수가 적다면 행렬은 수많은 0 값을 저장하기에 네트워크를 표현하기에 더 비효율 적일 것. \n",
    "\n",
    "하지만 행렬에서는 두 사용자가 연결되어있는지 빠르게 확인할 수 있다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "def IsFriendships(L,row,col):\n",
    "    if bool(L[row][col]):\n",
    "        print(str(row)+\"와 \"+str(col)+\"은 친구입니다.\")\n",
    "    else:\n",
    "        print(str(row)+\"와 \"+str(col)+\"은 친구가 아닙니다.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0와 2은 친구입니다.\n",
      "0와 8은 친구가 아닙니다.\n"
     ]
    }
   ],
   "source": [
    "IsFriendships(friendships,0,2)\n",
    "IsFriendships(friendships,0,8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "사용자가 누구와 연결되어 있는지 알아보기 위해 해당 사용자를 나타내는 열 혹은 행만 살펴보몬 된다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "connFriends=[i for i, is_friend in enumerate(friendships[5]) if is_friend]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[4, 6, 7]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "connFriends"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
